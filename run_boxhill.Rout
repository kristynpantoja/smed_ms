
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> # last updated: 08/18/21
> # purpose: to create a list of boxhill simulations
> # scenario 1:
> #   linear vs. quadratic,
> #   where the true function is quadratic
> # scenario 2:
> #   linear vs. quadratic,
> #   where the true function is cubic
> 
> scenario = 2 # 1, 2
> 
> ################################################################################
> # Sources/Libraries
> ################################################################################
> output_home = "lm_experiments/lm/outputs"
> functions_home = "functions"
> 
> # for seqmed design
> source(paste(functions_home, "/SeqMED.R", sep = ""))
> source(paste(functions_home, "/SeqMED_batch.R", sep = ""))
> source(paste(functions_home, "/charge_function_q.R", sep = ""))
> source(paste(functions_home, "/construct_design_matrix.R", sep = ""))
> source(paste(functions_home, "/wasserstein_distance.R", sep = ""))
> source(paste(functions_home, "/posterior_parameters.R", sep = ""))
> source(paste(functions_home, "/simulate_y.R", sep = ""))
> 
> # for generating initial data
> source(paste(functions_home, "/MMED.R", sep = ""))
> source(paste(functions_home, "/variance_marginal_y.R", sep = ""))
> 
> # for box-hill deisign
> source(paste(functions_home, "/boxhill.R", sep = ""))
> 
> library(expm)
Loading required package: Matrix

Attaching package: ‘expm’

The following object is masked from ‘package:Matrix’:

    expm

> library(matrixStats)
> library(MASS)
> library(mvtnorm)
> library(knitr)
> 
> # set up parallelization
> library(foreach)
> library(future)
> library(doFuture)
> library(parallel)
> registerDoFuture()
> nworkers = detectCores()
> plan(multisession, workers = nworkers)
> 
> library(rngtools)
> library(doRNG)
> rng.seed = 123 # 123, 345
> registerDoRNG(rng.seed)
> 
> ################################################################################
> # simulation settings, shared for both scenarios (linear vs. quadratic)
> ################################################################################
> 
> # simulations settings
> numSims = 100
> numSeq = 100
> seqN = 1
> Nttl = numSeq * seqN
> xmin = -1
> xmax = 1
> numCandidates = 10^3 + 1
> candidates = seq(from = xmin, to = xmax, length.out = numCandidates)
> sigmasq = 0.1
> 
> # shared settings
> type01 = c(2, 3)
> mu0 = c(0, 0)
> mu1 = c(0, 0, 0)
> sigmasq01 = 0.25
> V0 = diag(rep(sigmasq01,length(mu0)))
> V1 = diag(rep(sigmasq01,length(mu1)))
> desX0 = function(x){
+   n = length(x)
+   return(cbind(rep(1, n), x))
+ }
> desX1 = function(x){
+   n = length(x)
+   return(cbind(rep(1, n), x, x^2))
+ }
> model0 = list(
+   designMat = desX0, beta.mean = mu0, beta.var = V0)
> model1 = list(
+   designMat = desX1, beta.mean = mu1, beta.var = V1)
> 
> # boxhill settings
> prior_probs = rep(1 / 2, 2)
> 
> ################################################################################
> # Scenarios
> ################################################################################
> if(scenario == 1){
+   betaT = c(-0.2, -0.4, 0.4)
+   fT = function(x) betaT[1] + betaT[2] * x + betaT[3] * x^2
+ } else if(scenario == 2){
+   betaT = c(0, -0.75, 0, 1)
+   fT = function(x) betaT[1] + betaT[2] * x + betaT[3] * x^2 + betaT[4] * x^3
+ }
> 
> ################################################################################
> # run simulations
> ################################################################################
> 
> # generate boxhills
> registerDoRNG(rng.seed)
> bh_list = foreach(i = 1:numSims) %dorng% {
+   print(paste0("starting simulation ", i, " out of ", numSims))
+   BH_m2(NULL, NULL, prior_probs, model0, model1, Nttl, 
+         candidates, fT, sigmasq)
+ }
